# generated by datamodel-codegen:
#   filename:  esign-swagger.json
#   timestamp: 2020-12-04T19:25:48+00:00
#   schema available at https://demo.esignanywhere.net/Api/swagger/docs/v5

from datetime import datetime
from enum import Enum
from typing import Any, Optional
from uuid import UUID

from pydantic import BaseModel, Field


class RedirectPolicy(Enum):
    None_ = "None"
    ToRecipients = "ToRecipients"
    ToDesigner = "ToDesigner"
    ToSend = "ToSend"


class CreateDraftOptions(BaseModel):
    AfterSendRedirectUrl: str | None = Field(
        None, description="The redirection URL after sending the envelope."
    )
    AfterSendCallbackUrl: str | None = Field(
        None,
        description="The URL where a callbackl is sent to after sending the envelope.",
    )
    RedirectPolicy: Optional["RedirectPolicy"] = Field(
        None,
        description="Specifies where to redirect if <code>AllowAgentRedirect</code> is <code>true</code>.",
    )
    AllowAgentRedirect: bool | None = Field(
        None, description="Specifies if the agentmode is active."
    )
    IframeWhiteList: str | None = Field(
        None,
        description='A string indicating a white list of urls where the designer is allowed to be used in agent mode.\r\nExample: "http://172.16.17.181;http://foo.org"',
    )


class WorkstepEventCallback(BaseModel):
    Url: str | None = Field(None, description="The callback URL.")
    Blacklist: list[str] | None = Field(
        None,
        description="A list off callback types which are NOT sent.\r\nAn empty lists means are callback types should fire a callback.\r\nYou can either have a black OR white list.",
    )
    WhiteList: list[str] | None = Field(
        None,
        description="A list of callbacks which should be sent.\r\nAn empty lists means are callback types should fire a callback.\r\nYou can either have a black OR white list.",
    )


class RecipientType(Enum):
    Signer = "Signer"
    Cc = "Cc"
    Acknowledge = "Acknowledge"
    Pkcs7Signer = "Pkcs7Signer"
    Automatic = "Automatic"


class SendEnvelopeDocumentOption(BaseModel):
    DocumentReference: str | None = Field(
        None, description="The document reference number (starting with 1)."
    )
    IsHidden: bool | None = Field(
        None, description="Specifies if the referenced document is hidden."
    )


class AddFormFieldDescriptor(BaseModel):
    Name: str | None = Field(None, description="The name of the form field.")
    ReadOnly: bool | None = Field(
        None, description="Specifies if the form field is readonly."
    )
    Required: bool | None = Field(
        None, description="Specifies if the form field is required."
    )
    X: float | None = Field(None, description="The X coordinate in points.")
    Y: float | None = Field(None, description="The Y coordinate in points.")
    Width: float | None = Field(
        None, description="The width of the form field in points."
    )
    Height: float | None = Field(
        None, description="The height of the form field in points."
    )
    Page: int | None = Field(
        None, description="The page number of the form field. (Starting with 1)"
    )
    DiscriminatorType: str = Field(..., description="To differentiate between childs.")


class FillFormDescriptor(BaseModel):
    Name: str | None = Field(None, description="Name")
    DiscriminatorType: str = Field(
        ...,
        description="Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
    )


class Method(Enum):
    Pin = "Pin"
    Sms = "Sms"
    WindowsLive = "WindowsLive"
    CustomOAuthProvider = "CustomOAuthProvider"
    CustomSamlProvider = "CustomSamlProvider"
    BankId = "BankId"


class IdentificationType(Enum):
    NONE = "NONE"
    FOREIGN_TAX_CODE = "FOREIGN_TAX_CODE"
    PERSONAL_NUMBER = "PERSONAL_NUMBER"
    PASSPORT = "PASSPORT"
    NATIONAL_IDENTITY_CARD = "NATIONAL_IDENTITY_CARD"
    ITALIAN_TAX_CODE = "ITALIAN_TAX_CODE"
    NO_SERIAL_NUMBER = "NO_SERIAL_NUMBER"
    DRIVING_LICENSE = "DRIVING_LICENSE"


class DocumentType(Enum):
    CI = "CI"
    PA = "PA"
    PASS = "PASS"
    PD = "PD"
    ID = "ID"
    PN = "PN"
    AT = "AT"


class DisposableCertificateData(BaseModel):
    CountryResidence: str | None = None
    DocumentIssuingCountry: str | None = None
    IdentificationCountry: str | None = None
    IdentificationType: Optional["IdentificationType"] = None
    PhoneMobile: str | None = None
    DocumentType: Optional["DocumentType"] = None
    DocumentIssuedBy: str | None = None
    DocumentIssuedOn: datetime | None = None
    DocumentExpiryDate: datetime | None = None
    SerialNumber: str | None = None
    DocumentNumber: str | None = None
    OverrideHolderInCaseOfMismatch: bool | None = None


class RemoteCertificateData(BaseModel):
    UserId: str | None = None
    DeviceId: str | None = None


class OtpData(BaseModel):
    PhoneMobile: str | None = None


class AllowedPkcs7SignatureType(Enum):
    LocalCertificate = "LocalCertificate"
    RemoteCertificate = "RemoteCertificate"
    RemoteDisposableCertificate = "RemoteDisposableCertificate"


class Pkcs7SignerData(BaseModel):
    AllowedPkcs7SignatureTypes: list["AllowedPkcs7SignatureType"] | None = None


class HashAlgorithmIdentifier(Enum):
    Sha1 = "Sha1"
    Sha256 = "Sha256"
    Sha512 = "Sha512"


class GuidingBehavior(Enum):
    GuideOnlyRequiredTasks = "GuideOnlyRequiredTasks"
    GuideRequiredAndOptionalTasks = "GuideRequiredAndOptionalTasks"
    GuideDisabled = "GuideDisabled"


class FormFieldsGuidingBehavior(Enum):
    AllowSubmitAlways = "AllowSubmitAlways"
    AllowSubmitOnlyAfterAllRequiredFieldsAreDone = (
        "AllowSubmitOnlyAfterAllRequiredFieldsAreDone"
    )


class WarningPopupDisplayAfter(Enum):
    FillOrSignField = "FillOrSignField"
    Authentication = "Authentication"
    Always = "Always"
    Agreement = "Agreement"


class GuidingBehaviorOnFinishedTask(Enum):
    NoMove = "NoMove"
    MoveToNext = "MoveToNext"
    MoveToNextAndActivate = "MoveToNextAndActivate"


class DocumentViewingMode(Enum):
    EndlessPaperAllDocuments = "EndlessPaperAllDocuments"
    EndlessPaperPerDocument = "EndlessPaperPerDocument"


class ThumbnailMode(Enum):
    ShowAllPages = "ShowAllPages"
    ShowFirstPageOnly = "ShowFirstPageOnly"


class BatchSigningType(Enum):
    Basic = "Basic"
    OptIn = "OptIn"
    OptOut = "OptOut"
    OptOutWithRequiredAlwaysSelected = "OptOutWithRequiredAlwaysSelected"
    OptInWithRequiredAlwaysSelected = "OptInWithRequiredAlwaysSelected"


class ResourceUris(BaseModel):
    DelegationUri: str | None = Field(
        None, description="Uri which will be used to retreive form data for a client."
    )
    SignatureImagesUri: str | None = Field(
        None, description="Urif of the signature images."
    )


class CompareOperation(Enum):
    Equals = "Equals"


class SendEnvelopeAuthenticationFilter(BaseModel):
    CompareOperation: Optional["CompareOperation"] = Field(
        None, description="The compare method of the filter."
    )
    FilterId: str | None = Field(
        None, description="The filter id of the authentication."
    )
    FilterValue: str | None = Field(
        None, description="The filter value of the authentication."
    )


class KeyValuePair(BaseModel):
    Key: str | None = Field(None, description="Key.")
    Value: str | None = Field(None, description="Value.")


class ServerAction(BaseModel):
    CallSynchronous: bool | None = Field(
        None,
        description="Wether the server should call that action before returning to the client which called FinishWorkstep.",
    )
    Action: str | None = Field(None, description="Url of the server side action.")


class ClientAction(BaseModel):
    RemoveDocumentFromRecentDocumentList: bool | None = Field(
        None, description="Removes the document from recent document list."
    )
    CallClientActionOnlyAfterSuccessfulSync: bool | None = Field(
        None, description="Call client action only after successful sync."
    )
    ClientName: str | None = Field(None, description="Name for the client.")
    CloseApp: bool | None = Field(
        None, description="Defines if the app should be closed."
    )
    Action: str | None = Field(None, description="Url of the action.")


class Text(BaseModel):
    Language: str | None = Field(None, description="Language of this text.")
    Value: str | None = Field(None, description="Text of this element.")


class UserInformation(BaseModel):
    FirstName: str | None = None
    LastName: str | None = None
    EMail: str | None = None


class DisposableCertificateDisclaimerTexts(BaseModel):
    Texts: list["Text"] | None = Field(None, description="List of texts.")


class ATrustCertificateData(BaseModel):
    PhoneNumber: str | None = Field(None, description="PhoneNumber")


class BankIdPluginData(BaseModel):
    TrBiPersonalNumber: str | None = Field(None, description="PhoneNumber")
    TrBiAllowAnyPersonalNumber: bool | None = None


class SigningCertificateRevocationInformationIncludeMode(Enum):
    DoNotInclude = "DoNotInclude"
    Include = "Include"
    TryToInclude = "TryToInclude"
    CheckRevocationIncludeOcsp = "CheckRevocationIncludeOcsp"
    IncludeDss = "IncludeDss"
    TryToIncludeDss = "TryToIncludeDss"


class SignatureHashAlgorithm(Enum):
    Sha1 = "Sha1"
    Sha256 = "Sha256"
    Sha512 = "Sha512"


class CertificateFilter(BaseModel):
    KeyUsages: list[str] | None = Field(None, description="KeyUsages.")
    ThumbPrints: list[str] | None = Field(None, description="ThumbPrints.")
    RootThumbPrints: list[str] | None = Field(None, description="RootThumbPrints.")


class MultipleSignatureTypesAndBatchSigningSettings(BaseModel):
    IsUseBatchSigningCheckedByDefault: bool | None = Field(
        None,
        description='If enabled, the "Use batch signing" checkbox inside the dialog when signing a signature field is checked by default.',
    )
    IsRememberSignatureTypeCheckedByDefault: bool | None = Field(
        None,
        description='If enabled, the "Remember signature type" checkbox inside the dialog when signing a signature field is checked by default.',
    )
    IsRememberBatchSigningDecisionCheckedByDefault: bool | None = Field(
        None,
        description='If enabled, the "remember batch signing decision" checkbox inside the dialog when signing a signature field is checked by default.',
    )
    SkipMultipleSignatureTypesAndBatchSigningDialogIfBatchSigningPossible: None | (
        bool
    ) = Field(
        None,
        description="If enabled, and the IsUseBatchSigningCheckedByDefault is also enabled, the dialog to confirm the batch signing (and optionally choosing the signature type) will be skipped if either the signature type to use has been remembered earlier or a preferred type is set.",
    )


class VisibleAreaOptions(BaseModel):
    AllowedDomain: str | None = Field(
        None,
        description='Allowed domains for post messaging.\r\nE.g. "esignanywhere.com"',
    )
    Enabled: bool | None = Field(
        None,
        description="Defines if post messaging should be enabled.\r\nDefault is false.",
    )


class AuthenticationMethod(BaseModel):
    DiscriminatorType: str = Field(
        ...,
        description="Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
    )


class ReferenceCorner(Enum):
    Upper_Right = "Upper_Right"
    Upper_Left = "Upper_Left"
    Lower_Right = "Lower_Right"
    Lower_Left = "Lower_Left"


class GeneralPolicies(BaseModel):
    AllowSaveDocument: bool | None = Field(
        None, description="Is the client allowed to save the workstep document."
    )
    AllowSaveAuditTrail: bool | None = Field(
        None, description="Is the client allowed to save the audittrail document."
    )
    AllowRotatingPages: bool | None = Field(
        None, description="Is the client allowed to rotate the pages of the document."
    )
    AllowAppendFileToWorkstep: bool | None = Field(
        None, description="Is the client allowed to append a file to the workstep."
    )
    AllowAppendTaskToWorkstep: bool | None = Field(
        None, description="Is the client allowed to add append tasks to the workstep."
    )
    AllowEmailDocument: bool | None = Field(
        None, description="Is the client allowed to email the workstep document."
    )
    AllowPrintDocument: bool | None = Field(
        None, description="Is the client allowed to print the workstep document."
    )
    AllowFinishWorkstep: bool | None = Field(
        None, description="Is the client allowed to finish the workstep."
    )
    AllowRejectWorkstep: bool | None = Field(
        None, description="Is the client allowed to reject the workstep."
    )
    AllowRejectWorkstepDelegation: bool | None = Field(
        None,
        description="Is the client allowed to reject the workstep with reject type 'Delegation'.",
    )
    AllowUndoLastAction: bool | None = Field(
        None, description="Is the client allowed to undo actions."
    )
    AllowColorizePdfForms: bool | None = Field(
        None, description="Is the client allowed to colorize pdf forms."
    )
    AllowAdhocPdfAttachments: bool | None = Field(
        None, description="Is the client allowed to add adhoc attachments."
    )
    AllowAdhocSignatures: bool | None = Field(
        None,
        description="Is the client allowed to add signatures which are not defined in the tasks.",
    )
    AllowAdhocStampings: bool | None = Field(
        None,
        description="Is the client allowed to add stampings which are not defined in the tasks.",
    )
    AllowAdhocFreeHandAnnotations: bool | None = Field(
        None, description="Is the client allowed to add adhoc freehand annotations."
    )
    AllowAdhocTypewriterAnnotations: bool | None = Field(
        None, description="Is the client allowed to add adhoc typewriter annotations."
    )
    AllowAdhocPictureAnnotations: bool | None = Field(
        None, description="Is the client allowed to add adhoc picture annotations."
    )
    AllowAdhocPdfPageAppending: bool | None = Field(
        None, description="Is the client allowed to append adhoc documents."
    )
    AllowReloadOfFinishedWorkstep: bool | None = Field(
        None, description="Allow reload of finished workstep."
    )


class PictureAnnotationColorDepth(Enum):
    Color16M = "Color16M"
    Grayscale256 = "Grayscale256"


class SequenceMode(Enum):
    NoSequenceEnforced = "NoSequenceEnforced"
    SequenceOnlyRequiredTasks = "SequenceOnlyRequiredTasks"
    SequenceEnforced = "SequenceEnforced"


class PositionUnits(Enum):
    PdfUnits = "PdfUnits"
    Inches = "Inches"
    Millimeters = "Millimeters"


class ReferenceCorner1(Enum):
    Upper_Right = "Upper_Right"
    Upper_Left = "Upper_Left"
    Lower_Right = "Lower_Right"
    Lower_Left = "Lower_Left"


class SenderDataFields(BaseModel):
    Fields: list["KeyValuePair"] | None = None


class SignatureHashAlgorithm1(Enum):
    Sha1 = "Sha1"
    Sha256 = "Sha256"
    Sha512 = "Sha512"


class Type(Enum):
    Sha1Thumbprint = "Sha1Thumbprint"
    Subject = "Subject"


class Csp(Enum):
    Default = "Default"
    Custom = "Custom"


class SigningCertificateDescriptor(BaseModel):
    Identifier: str | None = Field(None, description="Identifier for this")
    Type: Optional["Type"] = Field(
        None, description="Defines which type should be used."
    )
    Csp: Optional["Csp"] = Field(
        None, description="Defines which Csp type should be used."
    )


class NotificationEvent(Enum):
    ConfirmTransactionCode = "ConfirmTransactionCode"
    DefaultEventType = "DefaultEventType"
    AgreementAccepted = "AgreementAccepted"
    AgreementRejected = "AgreementRejected"
    RequestPrepareAuthenticationInformationSuccess = (
        "RequestPrepareAuthenticationInformationSuccess"
    )
    PrepareAuthenticationSuccess = "PrepareAuthenticationSuccess"
    AuthenticationFailed = "AuthenticationFailed"
    AuthenticationRejected = "AuthenticationRejected"
    AuthenticationSuccess = "AuthenticationSuccess"
    ReAuthenticationFailed = "ReAuthenticationFailed"
    AuditTrailRequested = "AuditTrailRequested"
    AuditTrailXmlRequested = "AuditTrailXmlRequested"
    CalledPage = "CalledPage"
    WhoIsInformation = "WhoIsInformation"
    DocumentDownloaded = "DocumentDownloaded"
    FlattenedDocumentDownloaded = "FlattenedDocumentDownloaded"
    AddedAnnotation = "AddedAnnotation"
    AddedAttachment = "AddedAttachment"
    AppendedDocument = "AppendedDocument"
    FormsFilled = "FormsFilled"
    ConfirmReading = "ConfirmReading"
    PageViewChanged = "PageViewChanged"
    SendTransactionCode = "SendTransactionCode"
    PrepareSignWorkstepDocument = "PrepareSignWorkstepDocument"
    SignWorkstepDocument = "SignWorkstepDocument"
    UndoAction = "UndoAction"
    WorkstepCreated = "WorkstepCreated"
    WorkstepFinished = "WorkstepFinished"
    WorkstepRejected = "WorkstepRejected"
    DisablePolicyAndValidityChecks = "DisablePolicyAndValidityChecks"
    EnablePolicyAndValidityChecks = "EnablePolicyAndValidityChecks"
    AppendFileToWorkstep = "AppendFileToWorkstep"
    AppendTasksToWorkstep = "AppendTasksToWorkstep"
    SetOptionalDocumentState = "SetOptionalDocumentState"
    StartBatch = "StartBatch"
    EndBatch = "EndBatch"
    PreparePayloadForBatch = "PreparePayloadForBatch"


class NotificationEventsToSend(BaseModel):
    NotificationEvents: list["NotificationEvent"] | None = Field(
        None, description="Collection of notification event types."
    )


class WorkstepTask(BaseModel):
    IsRequired: bool | None = Field(None, description="Define if the task is required.")
    Id: str | None = Field(None, description="Define the identifier for the task.")
    DisplayName: str | None = Field(
        None, description="Define the name to be displayed."
    )
    DocRefNumber: int | None = Field(None, description="Document number of the task.")
    AdditionalInformation: str | None = Field(
        None, description="Additional information for the client"
    )
    BatchId: str | None = Field(
        None,
        description="Defines multiple tasks which can be executed as a batch (e.g. signatures which accept same data).",
    )
    DiscriminatorType: str = Field(
        ...,
        description="Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
    )


class FinalizeAction(BaseModel):
    DiscriminatorType: str = Field(..., description="DiscriminatorType.")


class Position(BaseModel):
    PositionX: float | None = Field(None, description="X position of the element.")
    PositionY: float | None = Field(None, description="Y position of the element.")


class Size(BaseModel):
    Height: float | None = Field(None, description="Height of the element.")
    Width: float | None = Field(None, description="Width of the element.")


class AuthenticationCertificateDescriptor(BaseModel):
    Identifier: str | None = Field(
        None, description="Identifier for this AuthenticationCertificateDescriptor."
    )
    Type: str | None = Field(None, description="Defines the type.")


class CreateDraftResult(BaseModel):
    DraftId: str | None = None


class Error(BaseModel):
    ErrorId: str | None = Field(None, description="Id of the error.")
    Message: str | None = Field(None, description="Message from the error.")
    SupportId: str | None = Field(None, description="Support identifier.")
    ThrownException: dict[str, Any] | None = None


class Status(Enum):
    Draft = "Draft"
    Started = "Started"
    InProgress = "InProgress"
    Canceled = "Canceled"
    Completed = "Completed"
    Expired = "Expired"
    Rejected = "Rejected"
    Template = "Template"
    CompletedWithWarnings = "CompletedWithWarnings"
    BulkCompleted = "BulkCompleted"
    BulkPartlyCompleted = "BulkPartlyCompleted"


class Status1(Enum):
    Draft = "Draft"
    Started = "Started"
    InProgress = "InProgress"
    Canceled = "Canceled"
    Completed = "Completed"
    Expired = "Expired"
    Rejected = "Rejected"
    Template = "Template"
    CompletedWithWarnings = "CompletedWithWarnings"
    BulkCompleted = "BulkCompleted"
    BulkPartlyCompleted = "BulkPartlyCompleted"


class EnvelopeBasicOptions(BaseModel):
    Name: str | None = Field(None, description="Name of the envelope.")
    EmailSubject: str | None = Field(None, description="Email subject of the envelope.")
    EmailBody: str | None = Field(None, description="Email body of the envelope.")
    EnableReminders: bool | None = Field(
        None,
        description="Enable reminders for the envelope.\r\nIf set, overrides the default options from the organization/user.",
    )
    FirstReminderDayAmount: int | None = Field(
        None,
        description="Amount of days until the first reminder is sent out.\r\nIf set, overrides the default options from the organization/user.",
    )
    RecurrentReminderDayAmount: int | None = Field(
        None,
        description="Amount of days until all recurrent reminders are sent out.\r\nIf set, overrides the default options from the organization/user.",
    )
    BeforeExpirationDayAmount: int | None = Field(
        None,
        description="Amount of days until a reminder about the expiration is sent out.\r\nIf set, overrides the default options from the organization/user.",
    )
    DaysUntilExpire: int | None = Field(
        None,
        description="Amount of days until the envelope expires.\r\nIf set, overrides the default options from the organization/user.",
    )
    CallbackUrl: str | None = Field(
        None, description="The callback url of the envelope."
    )
    StatusUpdateCallbackUrl: str | None = Field(
        None, description="The callback url of status changes for the envelope."
    )
    WorkstepEventCallback: Optional["WorkstepEventCallback"] = Field(
        None, description="Workstep event callback options."
    )
    MetaDataXml: str | None = None


class Status2(Enum):
    NotSigned = "NotSigned"
    Signed = "Signed"
    Rejected = "Rejected"
    Delegated = "Delegated"


class RecipientType1(Enum):
    Signer = "Signer"
    Cc = "Cc"
    Acknowledge = "Acknowledge"
    Pkcs7Signer = "Pkcs7Signer"
    Automatic = "Automatic"


class DocumentFormField(BaseModel):
    Name: str | None = None
    Values: list["KeyValuePair"] | None = None


class DocumentAttachment(BaseModel):
    Name: str | None = None
    DocumentId: str | None = None


class DocumentSignatureField(BaseModel):
    Name: str | None = None


class Type1(Enum):
    None_ = "None"
    LongLivedDisposableCertificateUsage = "LongLivedDisposableCertificateUsage"


class EnvelopeStatusWarning(BaseModel):
    Type: Optional["Type1"] = Field(None, description="The warning type.")
    ContentXmlList: list[str] | None = Field(None, description="The warning contents.")


class DisclaimerType(Enum):
    DisposableDisclaimer = "DisposableDisclaimer"


class DisclaimerDocument(BaseModel):
    DocumentId: str | None = Field(
        None, description="The Id of the document for downloading."
    )
    DisclaimerType: Optional["DisclaimerType"] = Field(
        None, description="The type of the document."
    )


class Status3(Enum):
    Draft = "Draft"
    Canceled = "Canceled"
    Completed = "Completed"
    Expired = "Expired"
    Rejected = "Rejected"
    Template = "Template"
    ActionRequired = "ActionRequired"
    WaitingForOthers = "WaitingForOthers"
    ExpiringSoon = "ExpiringSoon"
    Active = "Active"


class FindEnvelopesDescriptor(BaseModel):
    StartDate: datetime | None = Field(
        None,
        description="If set, filters for envelopes which where created (Status: Template, Draft) or sent after the start date.",
    )
    EndDate: datetime | None = Field(
        None,
        description="If set, filters for envelopes which where created (Status: Template, Draft) or sent before the end date.",
    )
    SearchText: str | None = Field(
        None,
        description="If set, filters for the given text in email subject/body, envelope name/description, sender first/lastname email and recipient first/lastname email.\r\nExpensive!",
    )
    Status: Optional["Status3"] = Field(
        None, description="If set, filters for envelopes by status."
    )
    InStatusSinceDays: int | None = Field(
        None,
        description="If set, filters for envelopes which have the given status for the given days.\r\nMust be combined with Status.",
    )
    Senders: list[str] | None = Field(
        None, description="If set, filters for the sender email adresses."
    )
    Signers: list[str] | None = Field(
        None, description="If set, filters for the given sender email adresses."
    )
    Recipients: list[str] | None = Field(
        None, description="If set, filters for the given recipient email adresses."
    )
    WaitingForRecipient: str | None = Field(
        None,
        description="If set, filters for envelopes which are waiting for the given recipient email address.",
    )
    Bulk: str | None = Field(
        None, description="If set, filters for envelopes for of the given bulk id."
    )


class Status4(Enum):
    Draft = "Draft"
    Started = "Started"
    InProgress = "InProgress"
    Canceled = "Canceled"
    Completed = "Completed"
    Expired = "Expired"
    Rejected = "Rejected"
    Template = "Template"
    CompletedWithWarnings = "CompletedWithWarnings"
    BulkCompleted = "BulkCompleted"
    BulkPartlyCompleted = "BulkPartlyCompleted"


class ExtendedFindEnvelopesResultEntry(BaseModel):
    Status: Optional["Status4"] = Field(None, description="The status of the envelope.")
    Id: str | None = Field(None, description="The envelope id.")
    Name: str | None = Field(None, description="The name of the envelope.")
    MetaDataXml: str | None = None
    Bulk: str | None = Field(
        None, description="The bulk id. \r\nOnly set if the envelope is part of a bulk."
    )


class PrepareSendEnvelopeStepsDescriptor(BaseModel):
    ClearFieldMarkupString: bool | None = Field(
        None,
        description="Specifies if the parsed field markup string should be deleted from the pdf.",
    )


class FormsGrouping(Enum):
    PerPage = "PerPage"
    PerDocument = "PerDocument"
    PerEnvelope = "PerEnvelope"


class ParseFormFields(BaseModel):
    MapRequiredFieldsToRequiredTask: bool | None = Field(
        None, description="Maps required fields to required task."
    )
    FormsGrouping: Optional["FormsGrouping"] = Field(
        None, description="Defines how the forms are grouped."
    )
    ReturnSimplifiedConfig: bool | None = Field(
        None, description="Defines if the simplified configuration should be returned."
    )
    AddKeepExistingValueFlag: bool | None = Field(
        None, description="Adds KeepExisitingValue flag."
    )
    ParseFormField: bool | None = Field(
        None, description="Defines if form fields should be parsed."
    )


class AdhocPolicies(BaseModel):
    AllowModificationsAfterSignature: bool | None = Field(
        None, description="Allows modification after the signature."
    )


class LinkParsingConfiguration(BaseModel):
    ParsePdfGoToLinks: bool | None = Field(None, description="Enable parse Goto links.")
    ParseHyperlinks: bool | None = Field(None, description="Enable parse HyperLinks.")
    ExtractHyperlinksFromText: bool | None = Field(
        None, description="Enable extract HyperLinks from text."
    )


class SigStringsForParsing(BaseModel):
    StartPattern: str | None = Field(None, description="Defines the start pattern.")
    EndPattern: str | None = Field(None, description="Defines the end pattern.")
    ClearSigString: bool | None = Field(
        None, description="Configure if the SigString should be cleared."
    )
    SearchEntireWordOnly: bool | None = Field(
        None, description="Configure if the entire word should be searched only."
    )


class StampImprintConfiguration(BaseModel):
    DisplayExtraInformation: bool | None = Field(
        None, description="Define if extra information should be displayed."
    )
    DisplayEmail: bool | None = Field(
        None, description="Define if email should be displayed."
    )
    DisplayIp: bool | None = Field(
        None, description="Define if ip should be displayed."
    )
    DisplayName: bool | None = Field(
        None, description="Define if name should be displayed."
    )
    DisplaySignatureDate: bool | None = Field(
        None, description="Define if signature date should be displayed."
    )
    FontFamily: str | None = Field(None, description="Define a font-family.")
    FontSize: float | None = Field(None, description="Define a font-size.")
    OverrideLegacyStampImprint: bool | None = Field(
        None,
        description="If set to false everything behaves as it does now, if set to true all StampImprintConfiguration values are evaluated independent of the signature type",
    )
    DisplayTransactionId: bool | None = Field(
        None, description="Only useful for transaction code signatures."
    )
    DisplayTransaktionToken: bool | None = Field(
        None, description="Only useful for transaction code signatures"
    )
    DisplayPhoneNumber: bool | None = Field(
        None,
        description="Only useful for transaction code signatures as they define phone numbers",
    )


class SendEnvelopeBulkResultEntry(BaseModel):
    EnvelopeId: str | None = None
    Email: str | None = None


class SendRemindersResult(BaseModel):
    Count: int | None = Field(
        None, description="The number of reminder emails which were sent out."
    )
    AvoidedDueToRateLimitCount: int | None = Field(
        None, description="The number of not sent reminders due to rate limit."
    )
    AvoidedDueToDisabledEmailCount: int | None = Field(
        None,
        description="The number of not sent reminders due to disabled email sending.",
    )


class LicenseInformationAmount(BaseModel):
    Total: int | None = Field(None, description="Total (-1 = unlimited)")
    Used: int | None = Field(None, description="Used")


class UploadSspFileResult(BaseModel):
    SspFileId: str | None = Field(
        None,
        description="The Id of the file. A <code>GUID</code> converted to a string.",
    )


class TeamMember(BaseModel):
    Email: str | None = Field(None, description="The email of the team member.")
    Members: list["TeamMember"] | None = Field(
        None, description="The team members which are one hiarchy step deeper."
    )


class UserActivationDescriptor(BaseModel):
    SendInvitationMail: bool | None = Field(
        None, description="A email should be sent after the user creation."
    )
    ForcePasswordReset: bool | None = Field(
        None,
        description="Indicates if user will be forced to reset the system-generated password after the first login or not.",
    )


class UserAuthentication(BaseModel):
    DiscriminatorType: str = Field(
        ...,
        description="Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
    )


class CreateUserResult(BaseModel):
    CreatedUserIds: list[UUID] | None = None


class AutomatedDelegationSettings(BaseModel):
    Reason: str | None = Field(None, description="Reason for automated delagation.")
    EndDate: str | None = Field(None, description="Endtime of automated delegation.")
    DelegateeUserId: str | None = Field(None, description="Delegatee user id.")
    UtilizeAlsoOnCopyRecipients: bool | None = Field(
        None, description="If cc recipient should be delgated."
    )


class DeleteUserReassignDescriptor(BaseModel):
    UserId: str | None = Field(
        None, description="The id of the user which receives the assignments."
    )
    ReassignDrafts: bool | None = Field(None, description="Reassigns drafts if true.")
    ReassignTemplates: bool | None = Field(
        None, description="Reassigns templates if true."
    )
    ReassignClipboard: bool | None = Field(
        None, description="Reassigns clipboard items if true."
    )
    ReassignAddressBook: bool | None = Field(
        None, description="Reassigns address book entries if true."
    )


class FindUsersDescriptor(BaseModel):
    Roles: list[str] | None = Field(
        None,
        description='If set, filters by user role. Default Roles:\r\n* "Automatic Sealing Sender"\r\n* "Developer"\r\n* "Power User"\r\n* "Registered Signer"\r\n* "Administrator"',
    )
    IsAutomatedDelegatedUser: bool | None = Field(
        None, description="User call to find automated delegated users."
    )


class ExtendedFindUsersResultEntry(BaseModel):
    Id: str | None = Field(None, description="The id of the User.")
    Email: str | None = Field(None, description="The email address of the User.")
    FirstName: str | None = Field(None, description="The first name of the user.")
    LastName: str | None = Field(None, description="The last name of the user.")
    UserName: str | None = Field(
        None,
        description="username of the user (used for usersynchronisation and alternative logins)",
    )
    Sid: str | None = Field(
        None,
        description="sid of the user (used for usersynchronisation and alternative logins)",
    )
    IsEnabled: bool | None = Field(
        None,
        description="Defines if the user is enabled and allowed to use the system.",
    )
    Authentications: list["UserAuthentication"] | None = None
    Roles: list[str] | None = Field(
        None, description="The roles of the user, which defines its permissions."
    )


class MeResult(BaseModel):
    Id: str | None = Field(None, description="The id of the User.")
    Email: str | None = Field(None, description="The email address of the User.")
    FirstName: str | None = Field(None, description="The first name of the user.")
    LastName: str | None = Field(None, description="The last name of the user.")


class FlowApiResult(BaseModel):
    Success: bool | None = None
    Version: str | None = None


class Agreements(BaseModel):
    pass


class AppendPages(BaseModel):
    pass


class Attachment(BaseModel):
    pass


class FormGroup(BaseModel):
    pass


class Form(BaseModel):
    Id: str | None = Field(None, description="Identifier for the form.")
    PositionPage: int | None = Field(None, description="Page number for the form.")
    DocRefNumber: int | None = Field(None, description="Document number for the form.")
    Position: Optional["Position"] = Field(
        None, description="Exact position of the form."
    )
    Size: Optional["Size"] = Field(None, description="Width and Height of the object.")
    IsHidden: bool | None = Field(None, description="Define if it is hidden.")
    ExportValue: str | None = Field(
        None, description="The export value of the form field."
    )
    Description: str | None = Field(
        None, description="Description to provide details about the element."
    )
    KeepExistingValue: bool | None = Field(
        None, description="If true, form value from Pdf is used."
    )
    CustomOrder: int | None = Field(
        None,
        description="Increasing order number. Can be used for tabbing through the form elements.",
    )
    DiscriminatorType: str = Field(
        ...,
        description="Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
    )


class PictureAnnotationConfiguration(BaseModel):
    pass


class ReadingTask(BaseModel):
    pass


class SignPkcs7(BaseModel):
    pass


class TargetDocument(BaseModel):
    DocRefNumber: int | None = Field(None, description="Document number.")
    IsCompleted: bool | None = Field(None, description="Define if it is completed.")


class TypewriterAnnotation(BaseModel):
    pass


class TextColor(BaseModel):
    A: int | None = Field(None, description="Defines A value of the color.")
    R: int | None = Field(None, description="Defines R value of the color.")
    G: int | None = Field(None, description="Defines G value of the color.")
    B: int | None = Field(None, description="Defines B value of the color.")


class CheckBox(BaseModel):
    pass


class ComboBox(BaseModel):
    pass


class BoxItem(BaseModel):
    Key: str | None = Field(None, description="Key of the item.")
    Value: str | None = Field(None, description="Value of the item.")
    IsSelected: bool | None = Field(
        None, description="Defines if the item is selected."
    )


class TextAlign(Enum):
    Left = "Left"
    Right = "Right"
    Center = "Center"


class FontSettingsAdvanced(BaseModel):
    FontFamily: str | None = Field(None, description="Defines the font-family.")
    TextAlign: Optional["TextAlign"] = Field(None, description="Alignment of the text.")
    TextColor: Optional["TextColor"] = Field(
        None, description="Choose the color for the text."
    )
    Name: str | None = Field(None, description="Naming of the font.")
    Size: float | None = Field(None, description="Define the size.")
    IsBold: bool | None = Field(
        None, description="Define if the font-style should be bold."
    )
    IsItalic: bool | None = Field(
        None, description="Define if the font-style should be italic."
    )


class ListBox(BaseModel):
    pass


class RadioButton(BaseModel):
    pass


class TextBox(BaseModel):
    pass


class FormFieldValidation(BaseModel):
    DiscriminatorType: str = Field(
        ...,
        description="Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
    )


class SigTypeBiometricSignature(BaseModel):
    pass


class SigTypeBiometricSignatureAndLocalCertificate(BaseModel):
    pass


class SigTypeGenericSigningPlugin(BaseModel):
    pass


class SigTypeExternalSigningProcess(BaseModel):
    pass


class SigTypePicture(BaseModel):
    DiscriminatorType: str


class SigTypeTransactionCodeAndBiometricSignature(BaseModel):
    pass


class SigTypeTransactionCodeAndLocalCertificate(BaseModel):
    pass


class SigTypeTransactionCodeBiometricSignatureAndLocalCertificate(BaseModel):
    pass


class SigTypeClick2Sign(BaseModel):
    pass


class SigTypeDraw2Sign(BaseModel):
    pass


class SigTypeType2Sign(BaseModel):
    pass


class AuthenticationMethodCertificate(BaseModel):
    pass


class AuthenticationMethodFacebook(BaseModel):
    pass


class AuthenticationMethodGenericOAuthClient(BaseModel):
    pass


class AuthenticationMethodResourceUri(BaseModel):
    Uri: str | None = Field(None, description="Uri for the resource.")
    AccessTokenParamName: str | None = Field(
        None, description="AccessTokenParamName for the uri."
    )
    # Field: Optional[str] = Field(None, description='Field of the resource uri.')
    FieldOrig: str | None = Field(
        None, description="Field of the resource uri.", alias="Field"
    )
    FieldId: str | None = Field(None, description="Id for the field.")


class CompareOperation1(Enum):
    Equal = "Equal"
    NotEqual = "NotEqual"


class AuthenticationMethodCheck(BaseModel):
    FieldId: str | None = Field(None, description="Field id")
    CompareOperation: Optional["CompareOperation1"] = Field(
        None, description="Compare operator."
    )
    Value: str | None = Field(None, description="Value of the check.")


class AuthenticationMethodGenericSamlClient(BaseModel):
    pass


class AuthenticationMethodGoogle(BaseModel):
    pass


class AuthenticationMethodIdentityServer(BaseModel):
    pass


class AuthenticationMethodNamirialRemoteSignature(BaseModel):
    pass


class AuthenticationMethodBankId(BaseModel):
    pass


class AuthenticationMethodPin(BaseModel):
    pass


class AuthenticationMethodSms(BaseModel):
    pass


class AuthenticationMethodUserId(BaseModel):
    pass


class AuthenticationMethodWindowsLive(BaseModel):
    pass


class FormFieldValidationDate(BaseModel):
    pass


class FormFieldValidationRange(BaseModel):
    From: str | None = Field(
        None, description="Defines a value for the start of the range."
    )
    To: str | None = Field(
        None, description="Defines a value for the end of the range."
    )


class FormFieldValidationEmail(BaseModel):
    pass


class FormFieldValidationNumber(BaseModel):
    pass


class FormFieldValidationPhone(BaseModel):
    pass


class FormFieldValidationTime(BaseModel):
    pass


class AutomaticSignature(FinalizeAction):
    SigId: str | None = Field(
        None, description="Signature Id from automatic signature."
    )


class Timestamp(FinalizeAction):
    SpcId: str | None = Field(
        None, description="SignaturePluginConfiguration Id for this timestamp."
    )
    DocRefNumbers: str | None = Field(
        None, description="Document number for this timestamp."
    )


class FillCheckBoxFormDescriptor(BaseModel):
    pass


class FillComboBoxFormDescriptor(BaseModel):
    pass


class FillListBoxFormDescriptor(BaseModel):
    pass


class FillRadioButtonFormDescriptor(BaseModel):
    pass


class FillTextBoxFormDescriptor(BaseModel):
    pass


class AddCheckBoxFormFieldDescriptor(BaseModel):
    pass


class AddComboBoxFormFieldDescriptor(BaseModel):
    pass


class AddFormFieldChoiceItemDescriptor(BaseModel):
    ExportValue: str | None = Field(
        None, description="The technical textual description."
    )
    DisplayValue: str | None = Field(
        None, description="The visual textual description."
    )
    IsSelected: bool | None = Field(
        None, description="Boolean indicating if the item is selected by default."
    )


class AddFormFieldChoiceItemsDescriptor(BaseModel):
    DiscriminatorType: str


class AddFormFieldWithFontSettingsDescriptor(BaseModel):
    pass


class AddListBoxFormFieldDescriptor(BaseModel):
    pass


class AddRadioButtonFormFieldDescriptor(BaseModel):
    pass


class AddTextBoxFormFieldDescriptor(BaseModel):
    pass


class UserAuthenticationSaml(UserAuthentication):
    # MODIFIED allOf bugfix
    ProviderName: str | None = Field(
        None,
        description="The name of the referenced SAML Provider.",
    )
    UserIdentifierAttibuteValue: str | None = Field(
        None,
        description="Defines the attribute value, that identifies the user this method belongs to.",
    )


class AddFormFields(BaseModel):
    Forms: dict[str, list["AddFormFieldDescriptor"]] | None = Field(
        None,
        description="A dictionary consisting of doc reference numbers and form field descriptions.\r\n\r\nAddFormFieldDescriptor = Abstract class, use the derived classes:\r\n- AddCheckBoxFormFieldDescriptor\r\n- AddComboBoxFormFieldDescriptor\r\n- AddRadioButtonFormFieldDescriptor\r\n- AddTextBoxFormFieldDescriptor\r\n- AddListBoxFormFieldDescriptor\r\n            \r\nFor usage see sample code.",
    )


class OverrideFormFieldOptions(BaseModel):
    Forms: dict[str, list["FillFormDescriptor"]] | None = Field(
        None,
        description="Abstract class, use the derived classes:\r\n- FillCheckBoxFormDescriptor\r\n- FillComboBoxFormDescriptor\r\n- FillListBoxFormDescriptor\r\n- FillRadioButtonFormDescriptor\r\n- FillTextBoxFormDescriptor\r\n            \r\nFor usage see sample code.\r\n\r\nThe name of the form field.",
    )


class SendEnvelopeAuthentication(BaseModel):
    Method: Optional["Method"] = Field(None, description="The authentication method.")
    Parameter: str | None = Field(
        None, description="The needed parameters for the authentication."
    )
    Filters: list["SendEnvelopeAuthenticationFilter"] | None = Field(
        None, description="The filters for the authentication (OAUTH and SAML only)."
    )


class SwissComCertificateData(BaseModel):
    PhoneNumber: str | None = None
    MobileId: str | None = None
    Parameters: list["KeyValuePair"] | None = None


class FinishAction(BaseModel):
    ServerActions: list["ServerAction"] | None = Field(
        None,
        description="Configure the actions done by the server when the workstep is finished.",
    )
    ClientActions: list["ClientAction"] | None = Field(
        None,
        description="Client actions can specify the behavior of a specific client after a workstep is finished.",
    )


class IntroTexts(BaseModel):
    Texts: list["Text"] | None = Field(None, description="Collection of texts.")


class SenderInformation(BaseModel):
    UserInformation: Optional["UserInformation"] = Field(
        None, description="Information about the user."
    )


class TransactionCodeConfiguration(BaseModel):
    Id: str | None = Field(None, description="Id of the transaction code.")
    HashAlgorithmIdentifier: Optional["HashAlgorithmIdentifier"] = Field(
        None, description="HashAlgorithm identifier to be used."
    )
    Texts: list["Text"] | None = Field(None, description="Collection of all texts.")


class ViewerPreferences(BaseModel):
    ShowPageNavigationBar: bool | None = Field(
        None, description="Obsolete. Replaced by ShowPageNavigationButtons."
    )
    ShowThumbnails: bool | None = Field(
        None,
        description="If enabled, the thumbnail display will be visible, otherwise false.",
    )
    SkipFinishConfirmDialog: bool | None = Field(
        None,
        description="If enabled, finish action will be executed immediately without confirm dialog.",
    )
    SkipDocumentDialog: bool | None = Field(
        None,
        description="If enabled, the download document dialog after finishing the workstep will be skipped.",
    )
    ShowImagesInFullWidth: bool | None = Field(
        None,
        description="If enabled, available width will be used for images which might stretch them.",
    )
    DisableGeolocation: bool | None = Field(
        None, description="If enabled, Geolocation won't be used for webservice calls."
    )
    ShowDocumentDownloadDialogAfterAutomaticFinish: bool | None = Field(
        None,
        description='If enabled, the "Download documents dialog" after automatically finishing the workstep will be shown (e.g. acknowledge receipt scenario).',
    )
    AttachmentsMaxFileSize: int | None = Field(
        None,
        description="Allows to configure the maximum file size for attachments in kBytes.",
    )
    SkipPreviewImageOnDisposableCertificate: bool | None = Field(
        None,
        description="Allows to disable the preview image of the signature when using the Namirial Disposable certificate functionality.",
    )
    LoadCustomJs: bool | None = Field(
        None,
        description="If enabled, a Custom.js file will be loaded when the page is opened allowing to configure customized data.",
    )
    AllowCustomButtons: bool | None = Field(
        None,
        description="If enabled, custom buttons can be added via xyzmo.Customization plugin.",
    )
    GuidingBehavior: Optional["GuidingBehavior"] = Field(
        None, description="Defines how the viewer should guide through the tasks."
    )
    FormFieldsGuidingBehavior: Optional["FormFieldsGuidingBehavior"] = Field(
        None, description="Defining how the viewer should guide through form fields."
    )
    ShowVersionNumber: bool | None = Field(
        None,
        description="Obsolete. Defining if the viewer should show the version number.",
    )
    EnableWarningPopupOnLeave: bool | None = Field(
        None,
        description="Defining if the viewer should display a warning popup when the user leaves the page.",
    )
    WarningPopupDisplayAfter: Optional["WarningPopupDisplayAfter"] = Field(
        None, description="Defining when the warning popup should be displayed."
    )
    FinishWorkstepOnOpen: bool | None = Field(
        None,
        description="If set to 1 the workstep is automatically finished when opened in the viewer, if finishing is possible.",
    )
    AutoFinishAfterRequiredTasksDone: bool | None = Field(
        None,
        description="If enabled, finish action will be automatically triggered after last required task is done.",
    )
    GuidingBehaviorOnFinishedTask: Optional["GuidingBehaviorOnFinishedTask"] = Field(
        None,
        description="Defines the guiding behavior after a task has been completed (e.g. signature field has been signed). This flag is not taken into account if the guiding is disabled.",
    )
    SkipThankYouDialog: bool | None = Field(
        None, description="Obsolete. Replaced by ShowFinishPossibleHint."
    )
    NativeAppsUrlScheme: str | None = Field(
        None,
        description="Defines the url scheme for the native SAW Viewer applications (needed for customized SAW Viewer apps).",
    )
    DocumentViewingMode: Optional["DocumentViewingMode"] = Field(
        None,
        description="Defines whether the envelope is displayed in its entirety or if only a specific document is shown at a time.",
    )
    ThumbnailMode: Optional["ThumbnailMode"] = Field(
        None,
        description="Defines the appearance of the thumbnail view: all pages of the entire document are shown, or only the first page of each document within an envelope.",
    )
    ShowTopBar: bool | None = Field(
        None,
        description="Defines if the top bar should be visible or not. If disabled, also the 'GuidingBehavior' and the 'DisplayRejectButtonInTopBar' will be deactivated.",
    )
    DisplayRejectButtonInTopBar: bool | None = Field(
        None,
        description="If enabled, the 'reject' button will be displayed in the left bar below the 'finish' button as well",
    )
    MultipleSignatureTypesAndBatchSigningSettings: Optional[
        "MultipleSignatureTypesAndBatchSigningSettings"
    ] = Field(None, description="MultipleSignatureTypesAndBatchSigning settings.")
    VisibleAreaOptions: Optional["VisibleAreaOptions"] = Field(
        None, description="Options for Post Messaging in Iframes."
    )
    ShowStartGuidingHint: bool | None = Field(
        None,
        description="If enabled, a hint to the next button is shown, where the guide can be started.",
    )
    ShowStatusBar: bool | None = Field(
        None,
        description="Defines if the status bar at the bottom should be visible or not. If disabled, product and version number and biometric signature device selection window is not available.",
    )
    ShowZoomButtons: bool | None = Field(
        None,
        description="Allows to disable the zoom buttons on the left side of the viewer.",
    )
    ShowNoGeolocationWarning: bool | None = Field(
        None,
        description="Defines if a warning should be shown in case the browser does not allow to retrieve the geolocation.",
    )
    AutoStartGuiding: bool | None = Field(
        None,
        description="Defines if the guiding (if disabled at all) should be started directly upon start.",
    )
    ShowPageGap: bool | None = Field(
        None,
        description="Defines whether or not to show a small gap between pages containing some bits of information (like corresponding document and page x/y) in Desktop/Tablet UI.",
    )
    ShowPageNavigationButtons: bool | None = Field(
        None,
        description="Allows to disable the page navigation buttons on the left side of the viewer.",
    )
    ShowFinishPossibleHint: bool | None = Field(
        None,
        description="If enabled, hints that the document can now be finished after all required tasks have been done, will be shown.",
    )
    SkipRejectConfirmDialog: bool | None = Field(
        None,
        description="If enabled, the confirm dialog to accept the reject action will not be shown.",
    )
    BatchSigningType: Optional["BatchSigningType"] = Field(
        None,
        description='Either Basic/OptIn/OptOut; if not set it should behave like "Basic"',
    )
    BatchSigningDisableNextButtonUntilDialogScrolledToBottom: bool | None = Field(
        None,
        description="Either true or false; if not set it should behave like false. Works only in combination with BatchSigningType OptIn/OptOut",
    )


class AuthenticationMethods(BaseModel):
    AuthenticationMethodList: list["AuthenticationMethod"] | None = Field(
        None,
        description="Abstract class, use the derived classes:\r\n- AuthenticationMethodCertificate\r\n- AuthenticationMethodFacebook\r\n- AuthenticationMethodGenericOAuthClient\r\n- AuthenticationMethodGenericSamlClient\r\n- AuthenticationMethodGoogle\r\n- AuthenticationMethodIdentityServer\r\n- AuthenticationMethodNamirialRemoteSignature\r\n- AuthenticationMethodPin\r\n- AuthenticationMethodSms\r\n- AuthenticationMethodUserId\r\n- AuthenticationMethodWindowsLive\r\n- AuthenticationMethodBankId\r\n            \r\nFor usage see sample code.\r\n\r\nMethod to authenticate.",
    )


class GenericSigningPluginData(BaseModel):
    PluginId: str | None = None
    SenderDataFields: Optional["SenderDataFields"] = None


class PdfSignatureCryptographicData(BaseModel):
    SignatureHashAlgorithm: Optional["SignatureHashAlgorithm"] = Field(
        None, description="Define the HashAlgorithm for the signature."
    )
    SigningCertificateDescriptor: Optional["SigningCertificateDescriptor"] = Field(
        None, description="Configure a SigningCertificateDescriptor for this object."
    )


class NotificationConfiguration(BaseModel):
    NotificationEventsToSend: Optional["NotificationEventsToSend"] = Field(
        None, description="Defines the events that should be send."
    )
    NotificationUrl: str | None = Field(None, description="The url of the notifcation.")


class WorkstepTasks(BaseModel):
    PictureAnnotationMinResolution: int | None = Field(
        None,
        description="Minimum resolution for PictureAnnotation of the picture based on the target size.",
    )
    PictureAnnotationMaxResolution: int | None = Field(
        None,
        description="Minimum resolution of PictureAnnotation the picture based on the target size.",
    )
    PictureAnnotationColorDepth: Optional["PictureAnnotationColorDepth"] = Field(
        None, description="Defines the color depth for PictureAnnotation."
    )
    SetFormFieldsToReadOnlyAfterTask: str | None = Field(
        None,
        description="set all form fields in the document to readonly right before this task is executed.",
    )
    SequenceMode: Optional["SequenceMode"] = Field(
        None, description="Mode for sequence of"
    )
    PositionUnits: Optional["PositionUnits"] = Field(
        None, description="Define the default position units."
    )
    ReferenceCorner: Optional["ReferenceCorner1"] = Field(
        None, description="Define the default reference corner."
    )
    Tasks: list["WorkstepTask"] | None = Field(
        None,
        description="Abstract class, use the derived classes:\r\n- Agreements\r\n- AppendPages\r\n- Attachment\r\n- FormGroup\r\n- PictureAnnotationConfiguration\r\n- ReadingTask\r\n- Signature\r\n- SignPkcs7\r\n- TypewriterAnnotation\r\n            \r\nFor usage see sample code.",
    )


class FinalizeActions(BaseModel):
    FinalizeActionList: list["FinalizeAction"] | None = Field(
        None,
        description="Abstract class, use the derived classes:\r\n- AutomaticSignature\r\n- Timestamp\r\n            \r\nFor usage see sample code.",
    )


class HyperLink(BaseModel):
    Id: str | None = Field(None, description="HyperLink Id.")
    DocRefNumber: int | None = Field(None, description="Document number.")
    PositionPage: int | None = Field(None, description="Page position.")
    Uri: str | None = Field(None, description="HyperLink Uri text.")
    Position: Optional["Position"] = Field(
        None, description="HyperLink position configuration."
    )
    Size: Optional["Size"] = Field(None, description="HyperLink size configuration.")


class Link(BaseModel):
    Id: str | None = Field(None, description="Link Id.")
    DocRefNumber: int | None = Field(None, description="Document number.")
    PositionPage: int | None = Field(None, description="Page position.")
    TargetId: str | None = Field(None, description="Link target id.")
    Position: Optional["Position"] = Field(
        None, description="HyperLink position configuration."
    )
    Size: Optional["Size"] = Field(None, description="HyperLink size configuration.")


class LinkTarget(BaseModel):
    Id: str | None = Field(None, description="Link Id.")
    DocRefNumber: int | None = Field(None, description="Document number.")
    PositionPage: int | None = Field(None, description="Page position.")
    Position: Optional["Position"] = Field(
        None, description="HyperLink position configuration."
    )
    Size: Optional["Size"] = Field(None, description="HyperLink size configuration.")


class SignatureTimestampData(BaseModel):
    Uri: str | None = Field(None, description="Uri for the SignatureTimestampData.")
    Username: str | None = Field(None, description="Define the username.")
    Password: str | None = Field(None, description="Define the password.")
    SignatureHashAlgorithm: Optional["SignatureHashAlgorithm1"] = Field(
        None, description="Define the HashAlgorithm for the signature."
    )
    AuthenticationCertifiateDescriptor: Optional[
        "AuthenticationCertificateDescriptor"
    ] = Field(
        None,
        description="Configure the AuthenticationCertifiateDescriptor for this object.",
    )


class WorkstepIdStampConfigurationLocation(BaseModel):
    Size: Optional["Size"] = Field(
        None, description="Defines width and height of the object."
    )
    MarginLeft: float | None = Field(None, description="Maring from left.")
    MarginTop: float | None = Field(None, description="Margin from top.")


class SentDocument(BaseModel):
    PageSizesInPoints: list["Size"] | None = None
    DocRefNumber: int | None = None
    FileName: str | None = None
    FormFields: list["DocumentFormField"] | None = None


class FinishedDocument(BaseModel):
    FlowDocumentId: str | None = None
    LogDocumentId: str | None = None
    Attachments: list["DocumentAttachment"] | None = None
    SignedSignatureFields: list["DocumentSignatureField"] | None = None
    DocRefNumber: int | None = None
    FileName: str | None = None
    FormFields: list["DocumentFormField"] | None = None


class ExtendedFindEnvelopesResult(BaseModel):
    Envelopes: list["ExtendedFindEnvelopesResultEntry"] | None = Field(
        None, description="The envelopes which match the searched criteria."
    )


class SigStringParsingConfiguration(BaseModel):
    SigStringsForParsings: list["SigStringsForParsing"] | None = Field(
        None, description="Collection of all SigStringsForParsing configurations."
    )


class SigType(BaseModel):
    Id: str | None = Field(None, description="Define a identifier.")
    DiscriminatorType: str = Field(
        ...,
        description="Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
    )
    Preferred: bool | None = Field(
        None, description="Define if this SigType is the preferred one."
    )
    StampImprintConfiguration: Optional["StampImprintConfiguration"] = Field(
        None, description="Confiugre StampImprintConfiguration."
    )
    SignaturePluginConfigurationId: str | None = Field(
        None, description="SignaturePluginConfigurationId"
    )


class SigTypeLocalCertificate(SigType):
    Ly: str | None = Field(None, description="Layout of the transaction code.")


class SigTypeTransactionCode(SigType):
    TrModType: str | None = Field(None, description="Transaction code modul type.")

    TrModTypeId: str | None = Field(
        None, description="Transaction code modul type identifier."
    )

    TrValidityInSeconds: int | None = Field(
        None, description="Validation of transaction in seconds."
    )

    Ly: str | None = Field(None, description="Layout of the transaction code.")

    TrConfIdIssueCertificate: str | None = Field(
        None,
        description="Reference to transaction code configuration for issuing the certificate and signing.",
    )

    TrConfId: str | None = Field(
        None, description="Reference to transcation code configuration id for signing."
    )

    IsPhoneNumberRequired: bool | None = Field(
        None, description="Define if the phone number should be required."
    )

    DiscriminatorType: str | None = Field(  # type:ignore
        None,
        description="Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
    )

    Preferred: bool | None = Field(
        None, description="Define if this SigType is the preferred one."
    )

    StampImprintConfiguration: Optional["StampImprintConfiguration"] = Field(
        None, description="Confiugre StampImprintConfiguration."
    )

    SignaturePluginConfigurationId: Optional["str"] = Field(
        None, description="SignaturePluginConfigurationId"
    )


class SigTypeAutomaticSignature(SigType):
    TrModType: str | None = Field(None, description="Transaction code modul type.")

    SealingProfileId: str | None = Field(
        None, description="Automatic SealingProfileId."
    )

    GenericSigningPluginId: str | None = Field(
        None, description="PluginId for a automatic GenericSigningPlugin signature."
    )

    RenderingLanguage: str | None = Field(None, description="ISO language code")

    DiscriminatorType: str | None = Field(  # type:ignore
        None,
        description="Property for parsing abstract base classes (polymorphism) in auto generated Swagger code.",
    )

    Preferred: bool | None = Field(
        None, description="Define if this SigType is the preferred one."
    )

    StampImprintConfiguration: Optional["StampImprintConfiguration"] = Field(
        None, description="Confiugre StampImprintConfiguration."
    )

    SignaturePluginConfigurationId: Optional["str"] = Field(
        None, description="SignaturePluginConfigurationId"
    )


class SendEnvelopeResult(BaseModel):
    BulkChildrenIds: list["SendEnvelopeBulkResultEntry"] | None = None
    EnvelopeId: str | None = None


class LicenseInformation(BaseModel):
    Type: str | None = Field(None, description="Type of license")
    ExpirationDateUtc: str | None = Field(
        None, description="ExpirationDate in UTC (-1 = unlimited)"
    )
    Documents: Optional["LicenseInformationAmount"] = Field(
        None, description="Number of Documents total (limit) and used"
    )
    Users: Optional["LicenseInformationAmount"] = Field(
        None, description="Number of Users total (limit) and used"
    )
    RegisteredSigners: Optional["LicenseInformationAmount"] = Field(
        None, description="Number of RegisteredSigners total (limit) and used"
    )


class Team(BaseModel):
    Name: str | None = Field(None, description="The name of the team.")
    AllowEnvelopeSharingWithinTeam: bool | None = Field(
        None,
        description="Indicates if envelopes are shared among members of this team.",
    )
    AllowTemplateSharingWithinTeam: bool | None = Field(
        None,
        description="Indicates if templates are shared among members of this team.",
    )
    Head: Optional["TeamMember"] = Field(None, description="The team leader.")


class UserDescription(BaseModel):
    Email: str | None = Field(None, description="The email address of the User.")
    FirstName: str | None = Field(None, description="The first name of the user.")
    LastName: str | None = Field(None, description="The last name of the user.")
    UserName: str | None = Field(
        None,
        description="username of the user (used for usersynchronisation and alternative logins)",
    )
    Sid: str | None = Field(
        None,
        description="sid of the user (used for usersynchronisation and alternative logins)",
    )
    JobTitle: str | None = Field(None, description="The job title of the user.")
    PhoneNumber: str | None = Field(None, description="The phone number of the user.")
    DefaultSubject: str | None = None
    DefaultMessage: str | None = None
    NotifyRecipientOnActionNeeded: bool | None = Field(
        None,
        description="Defines if the user gets an email notification every time if his actions are needed for an envelope.",
    )
    NotifySenderCompleteEnvelope: bool | None = Field(
        None,
        description="Defines if the user gets an email notification when a dedicated envelope is finished.",
    )
    NotifySenderDeclined: bool | None = Field(
        None,
        description="Defines if the user gets an email notification when a recipient rejected an envelope.",
    )
    NotifySenderDeliveryFailed: bool | None = Field(
        None,
        description="Sends an email to the user when the delivery of the envelope failed.",
    )
    NotifySenderViewed: bool | None = Field(
        None,
        description="Sends an email when a recipient viewed an envelope of the user.",
    )
    SignatureImage: str | None = Field(None, description="Base64 encoded byte array.")
    Roles: list[str] | None = Field(
        None, description="The roles of the user, which defines its permissions."
    )
    Authentications: list["UserAuthentication"] | None = Field(
        None,
        description="Abstract class, use the derived classes:\r\n- UserAuthenticationSaml\r\n            \r\nFor usage see sample code.",
    )


class UserUpdateDescription(BaseModel):
    Email: str | None = Field(None, description="The email address of the User.")
    FirstName: str | None = Field(None, description="The first name of the user.")
    LastName: str | None = Field(None, description="The last name of the user.")
    UserName: str | None = Field(
        None,
        description="username of the user (used for usersynchronisation and alternative logins)",
    )
    Sid: str | None = Field(
        None,
        description="sid of the user (used for usersynchronisation and alternative logins)",
    )
    JobTitle: str | None = Field(None, description="The job title of the user.")
    PhoneNumber: str | None = Field(None, description="The phone number of the user.")
    IsEnabled: bool | None = Field(None, description="Defines if the user is enabled.")
    DefaultSubject: str | None = Field(
        None, description="Defines the default subject used for sending envelopes"
    )
    DefaultMessage: str | None = Field(
        None, description="Defines the default message used for sending envelopes"
    )
    NotifyRecipientOnActionNeeded: bool | None = Field(
        None,
        description="Defines if the user gets an email notification every time if his actions are needed for an envelope.",
    )
    NotifySenderCompleteEnvelope: bool | None = Field(
        None,
        description="Defines if the user gets an email notification when a dedicated envelope is finished.",
    )
    NotifySenderDeclined: bool | None = Field(
        None,
        description="Defines if the user gets an email notification when a recipient rejected an envelope.",
    )
    NotifySenderDeliveryFailed: bool | None = Field(
        None,
        description="Sends an email to the user when the delivery of the envelope failed.",
    )
    NotifySenderViewed: bool | None = Field(
        None,
        description="Sends an email when a recipient viewed an envelope of the user.",
    )
    AutomatedDelegationSettings: Optional["AutomatedDelegationSettings"] = Field(
        None, description="Automated delegation settings."
    )
    Roles: list[str] | None = Field(
        None,
        description='Will completely override the existing Roles with the specified ones.\r\nDefault Roles:\r\n* "Automatic Sealing Sender"\r\n* "Developer"\r\n* "Power User"\r\n* "Registered Signer"\r\n* "Administrator"',
    )
    SignatureImage: str | None = None
    Authentications: list["UserAuthentication"] | None = Field(
        None,
        description="Abstract class, use the derived classes:\r\n- UserAuthenticationSaml\r\n            \r\nFor usage see sample code.",
    )


class ExtendedFindUsersResult(BaseModel):
    Entries: list["ExtendedFindUsersResultEntry"] | None = None


class FontSettings(BaseModel):
    Id: str | None = Field(None, description="Identification for the font.")
    TextColor: Optional["TextColor"] = Field(
        None, description="Choose the color for the text."
    )
    Name: str | None = Field(None, description="Naming of the font.")
    Size: float | None = Field(None, description="Define the size.")
    IsBold: bool | None = Field(
        None, description="Define if the font-style should be bold."
    )
    IsItalic: bool | None = Field(
        None, description="Define if the font-style should be italic."
    )


class SendEnvelopeRecipient(BaseModel):
    Email: str | None = Field(None, description="The email address of the recipient.")
    FirstName: str | None = Field(None, description="The first name of the recipient.")
    LastName: str | None = Field(None, description="The last name of the recipient.")
    LanguageCode: str | None = Field(
        None, description="The language code of the recipient."
    )
    EmailBodyExtra: str | None = Field(
        None, description="Additional email body for the recipient."
    )
    DisableEmail: bool | None = Field(
        None, description="Specifies if an email should be sent out for this recipient."
    )
    AddAndroidAppLink: bool | None = Field(
        None, description="If true, an Android app link is added to the email message."
    )
    AddIosAppLink: bool | None = Field(
        None, description="If true, an iOS app link is added to the email message."
    )
    AddWindowsAppLink: bool | None = Field(
        None, description="If true, an Windows app link is added to the email message."
    )
    AllowDelegation: bool | None = Field(
        None, description="If true, delegation is allowed for this recipient."
    )
    AllowAccessFinishedWorkstep: bool | None = Field(
        None,
        description="If true, access to finished workstep is allowed for this recipient.",
    )
    SkipExternalDataValidation: bool | None = Field(
        None, description="If true, external validation for this recipient is skipped."
    )
    AuthenticationMethods: list["SendEnvelopeAuthentication"] | None = Field(
        None,
        description="A list of authentications which are available for the recipient.",
    )
    DisposableCertificateData: Optional["DisposableCertificateData"] = Field(
        None, description="The disposable certificate data for the recipient."
    )
    SwissComCertificateData: Optional["SwissComCertificateData"] = Field(
        None, description="The swisscom disposable certificate data for the recipient."
    )
    RemoteCertificateData: Optional["RemoteCertificateData"] = Field(
        None, description="The remote certificate data for the recipient."
    )
    OtpData: Optional["OtpData"] = Field(
        None, description="The one time pad data for the recipient."
    )
    Pkcs7SignerData: Optional["Pkcs7SignerData"] = Field(
        None, description="The PKCS7 data for the recipient."
    )


class ReceiverInformation(BaseModel):
    UserInformation: Optional["UserInformation"] = Field(
        None, description="Information about the user."
    )
    HolderInformation: str | None = Field(
        None, description="Information about the holder."
    )
    DisposableCertificateDisclaimerTexts: Optional[
        "DisposableCertificateDisclaimerTexts"
    ] = Field(None, description="Disposable certificate disclaimer texts.")
    TransactionCodePushPluginData: list["KeyValuePair"] | None = Field(
        None,
        description="TransactionCodePushPlugin data as KeyValuePair: string, string",
    )
    ATrustCertificateData: Optional["ATrustCertificateData"] = Field(
        None, description="ATrust certificate configuration."
    )
    BankIdPluginData: Optional["BankIdPluginData"] = Field(
        None, description="ATrust certificate configuration."
    )
    GenericSigningPluginDataList: list["GenericSigningPluginData"] | None = Field(
        None, description="GenericSigningPlugin data list."
    )


class Policy(BaseModel):
    GeneralPolicies: Optional["GeneralPolicies"] = Field(
        None, description="Defines general policies for this workstep."
    )
    WorkstepTasks: Optional["WorkstepTasks"] = Field(
        None, description="Configuration of tasks."
    )
    FinalizeActions: Optional["FinalizeActions"] = Field(
        None,
        description="Allows to define actions which will be executed when the workstep will be finished. Those actions are performed before the ServerAction will be called and, depending on the type of the action, it might change the documents according to the workstep!",
    )


class Navigation(BaseModel):
    HyperLinks: list["HyperLink"] | None = None
    Links: list["Link"] | None = None
    LinkTargets: list["LinkTarget"] | None = None


class PdfSignatureProperties(BaseModel):
    PdfAConformant: bool | None = Field(
        None, description="Define usage of PdfAConformant."
    )
    PAdESPart4Compliant: bool | None = Field(
        None, description="Define usage of PAdESPart4Compliant."
    )
    IncludeSigningCertificateChain: bool | None = Field(
        None, description="Define if SigningCertificateChain should be included."
    )
    SigningCertificateRevocationInformationIncludeMode: Optional[
        "SigningCertificateRevocationInformationIncludeMode"
    ] = Field(
        None,
        description="Define the SigningCertificateRevocationInformationIncludeMode type.",
    )
    SignatureTimestampData: Optional["SignatureTimestampData"] = Field(
        None, description="Configure SignatureTimestampData for this object."
    )
    EnableEutlVerification: bool | None = Field(
        None, description="Enable EUTL verification"
    )
    EnableValidateSigningCertificateName: bool | None = Field(
        None, description="Enable validation of signing certificate name with regex"
    )
    SigningCertificateNameRegex: str | None = Field(
        None, description="Signing certificate name regex"
    )


class WorkstepIdStampConfiguration(BaseModel):
    ReferenceCorner: Optional["ReferenceCorner"] = Field(
        None, description="Defines the corner to reference."
    )
    Color: str | None = Field(None, description='Defines the color. (e.g. "blue")')
    Location: Optional["WorkstepIdStampConfigurationLocation"] = Field(
        None, description="Defines the location of this object."
    )


class EnvelopeOverrideOptionsRecipient(BaseModel):
    RecipientId: str | None = Field(
        None, description="The id of the recipient to replace."
    )
    OrderIndex: int | None = Field(
        None, description="The order index of the recipient to replace."
    )
    Email: str | None = Field(
        None, description="The email of the recipient to replace."
    )
    Recipient: Optional["SendEnvelopeRecipient"] = Field(
        None,
        description="The new recipient which should replace the existing recipient.",
    )


class SigTemplate(BaseModel):
    Size: Optional["Size"] = Field(
        None, description="Define width and height of the elements."
    )
    AllowedSignatureTypes: list["SigType"] | None = Field(
        None,
        description="Abstract class, use the derived classes:\r\n- SigTypeAutomaticSignature\r\n- SigTypeBiometricSignature\r\n- SigTypeBiometricSignatureAndLocalCertificate\r\n- SigTypeExternalSigningProcess\r\n- SigTypeLocalCertificate\r\n- SigTypeClick2Sign\r\n- SigTypeDraw2Sign\r\n- SigTypeType2Sign\r\n- SigTypeTransactionCode\r\n- SigTypeTransactionCodeAndBiometricSignature\r\n- SigTypeTransactionCodeAndLocalCertificate\r\n- SigTypeTransactionCodeBiometricSignatureAndLocalCertificate\r\n            \r\nFor usage see sample code.",
    )


class Teams(BaseModel):
    TeamList: list["Team"] | None = Field(None, description="The Teams list.")


class UserCreateModel(BaseModel):
    UserDescription: Optional["UserDescription"] = Field(
        None, description="The user which should be created."
    )
    UserActivationDescriptor: Optional["UserActivationDescriptor"] = Field(
        None,
        description="Information about the user activation after the user creation.",
    )


class SignatureConfiguration(BaseModel):
    SpcId: str | None = Field(None, description="Signature plugin configuration id.")
    PdfSignatureProperties: Optional["PdfSignatureProperties"] = Field(
        None, description="Configurate the signature properties."
    )
    PdfSignatureCryptographicData: Optional["PdfSignatureCryptographicData"] = Field(
        None, description="Configurate the cryptographic data."
    )
    CertificateFilter: Optional["CertificateFilter"] = Field(
        None, description="Signatureplugin certificate filter configuration."
    )


class AuditingToolsConfiguration(BaseModel):
    WriteAuditTrail: bool | None = Field(
        None, description="Defines if an audit trail file should be written."
    )
    IdStampConfiguration: Optional["WorkstepIdStampConfiguration"] = Field(
        None,
        description="Defines the configuration how and where on the documents the workstepId should be stamped.",
    )
    NotificationConfiguration: Optional["NotificationConfiguration"] = Field(
        None, description="Configures the service notificiations where being sent to."
    )


class EnvelopeOverrideOptions(BaseModel):
    Recipients: list["EnvelopeOverrideOptionsRecipient"] | None = Field(
        None,
        description="A list of recipients which should replace the recipients in the template.",
    )
    AddFormFields: Optional["AddFormFields"] = Field(
        None, description="Added form fields."
    )
    OverrideFormFieldValues: Optional["OverrideFormFieldOptions"] = Field(
        None, description="Form field descriptions which should be filled."
    )
    Name: str | None = Field(None, description="Name of the envelope.")
    EmailSubject: str | None = Field(None, description="Email subject of the envelope.")
    EmailBody: str | None = Field(None, description="Email body of the envelope.")
    EnableReminders: bool | None = Field(
        None,
        description="Enable reminders for the envelope.\r\nIf set, overrides the default options from the organization/user.",
    )
    FirstReminderDayAmount: int | None = Field(
        None,
        description="Amount of days until the first reminder is sent out.\r\nIf set, overrides the default options from the organization/user.",
    )
    RecurrentReminderDayAmount: int | None = Field(
        None,
        description="Amount of days until all recurrent reminders are sent out.\r\nIf set, overrides the default options from the organization/user.",
    )
    BeforeExpirationDayAmount: int | None = Field(
        None,
        description="Amount of days until a reminder about the expiration is sent out.\r\nIf set, overrides the default options from the organization/user.",
    )
    DaysUntilExpire: int | None = Field(
        None,
        description="Amount of days until the envelope expires.\r\nIf set, overrides the default options from the organization/user.",
    )
    CallbackUrl: str | None = Field(
        None, description="The callback url of the envelope."
    )
    StatusUpdateCallbackUrl: str | None = Field(
        None, description="The callback url of status changes for the envelope."
    )
    WorkstepEventCallback: Optional["WorkstepEventCallback"] = Field(
        None, description="Workstep event callback options."
    )
    MetaDataXml: str | None = None


class AdHocWorkstepConfiguration(BaseModel):
    WorkstepLabel: str | None = Field(None, description="A label for this workstep")
    SmallTextZoomFactorPercent: int | None = Field(
        None,
        description="Defines a image generation correction factor. If for example this document contains very small text, which might not be readable with the standard image resolution of the client, this factor can be used to tell the client to get a higher resolution.",
    )
    WorkstepTimeToLiveInMinutes: int | None = Field(
        None,
        description="Defines the time to live of all the documents created by the workstep. After this time to live is expired, all documents are deleted. '0' sets the time to live to forever.",
    )
    FinishAction: Optional["FinishAction"] = Field(
        None,
        description="Configure the actions done by the server and the by the clients when the workstep is finished.",
    )
    NoSequenceEnforced: bool | None = Field(
        None, description="Define the sequence mode."
    )
    SigTemplate: Optional["SigTemplate"] = Field(
        None, description="A template for signature definitions."
    )
    ParseFormFields: Optional["ParseFormFields"] = Field(
        None, description="Configuration for parsing the form fields."
    )
    AdhocPolicies: Optional["AdhocPolicies"] = Field(
        None,
        description="If the workstep is not generated by hand but automatically generated by the Workstep Controller AdhocPolicies are specified.",
    )
    ViewerPreferences: Optional["ViewerPreferences"] = Field(
        None,
        description="The Viewer Preferences can be used to adapt the appearance and the behavior of the SignAnyWhere Viewer.",
    )
    SignatureConfigurations: list["SignatureConfiguration"] | None = Field(
        None,
        description="Configurate the signatures for this workstep. One default configuration has to be defined. The default configuration is used for flatten signatures, adhoc signatures and signature fields which do not reference a special signature plugin configuration. The default configuration does not contain the attribute 'spcId'. If the attribute 'spcId' is defined the signature plugin configuration does only apply to signature fields referencing the configuration by specifiying",
    )
    SigStringParsingConfiguration: Optional["SigStringParsingConfiguration"] = Field(
        None, description="Configure the signature string parsing."
    )
    LinkParsingConfiguration: Optional["LinkParsingConfiguration"] = Field(
        None, description="Configure link parsing."
    )
    GeneralPolicies: Optional["GeneralPolicies"] = Field(
        None, description="Defines general policies for this workstep."
    )
    FinalizeActions: Optional["FinalizeActions"] = Field(
        None,
        description="Allows to define actions which will be executed when the workstep will be finished. Those actions are performed before the ServerAction will be called and, depending on the type of the action, it might change the documents according to the workstep!",
    )
    TransactionCodeConfigurations: None | (list["TransactionCodeConfiguration"]) = (
        Field(None, description="Collection of TransactionCodeConfigurations")
    )


class EnvelopeSendFromTemplateModel(BaseModel):
    TemplateId: str | None = Field(None, description="The Id of the template.")
    EnvelopeOverrideOptions: Optional["EnvelopeOverrideOptions"] = Field(
        None, description="Options which should be overriden for teh template."
    )


class WorkstepConfiguration(BaseModel):
    WorkstepLabel: str | None = Field(None, description="A label for this workstep.")
    SmallTextZoomFactorPercent: int | None = Field(
        None,
        description="Defines a image generation correction factor. If for example this document contains very small text, which might not be readable with the standard image resolution of the client, this factor can be used to tell the client to get a higher resolution.",
    )
    FinishAction: Optional["FinishAction"] = Field(
        None,
        description="Configure the actions done by the server and the by the clients when the workstep is finished.",
    )
    IntroTexts: Optional["IntroTexts"] = Field(None, description="Intro texts.")
    ReceiverInformation: Optional["ReceiverInformation"] = Field(
        None, description="Information about the recipient of the document."
    )
    SenderInformation: Optional["SenderInformation"] = Field(
        None, description="Information about the sender of the document."
    )
    TransactionCodeConfigurations: None | (list["TransactionCodeConfiguration"]) = (
        Field(None, description="Collection of TransactionCodeConfigurations")
    )
    SignatureConfigurations: list["SignatureConfiguration"] | None = Field(
        None, description="Collection of SignatureConfigurations"
    )
    ViewerPreferences: Optional["ViewerPreferences"] = Field(
        None,
        description="The Viewer Preferences can be used to adapt the appearance and the behavior of the SignAnyWhere Viewer.",
    )
    ResourceUris: Optional["ResourceUris"] = Field(None, description="Rescource uris.")
    AuthenticationMethods: Optional["AuthenticationMethods"] = Field(
        None, description="Authentication methods."
    )
    AdditionalClientWorkstepInformation: str | None = Field(
        None, description="Additional client workstep information."
    )
    AuditingToolsConfiguration: Optional["AuditingToolsConfiguration"] = Field(
        None, description="Configuration regarding tools for auditing."
    )
    Policy: Optional["Policy"] = Field(None, description="Workstep policies.")
    Navigation: Optional["Navigation"] = Field(
        None, description="Navigation configuration. (e.g. HyperLinks)"
    )


class DraftCreateFromTemplateModel(BaseModel):
    TemplateId: str | None = Field(None, description="The id of the template.")
    EnvelopeOverrideOptions: Optional["EnvelopeOverrideOptions"] = Field(
        None, description="The options to override from the template."
    )
    CreateDraftOptions: Optional["CreateDraftOptions"] = Field(
        None, description="Draft creation options."
    )


class EnvelopeStatusRecipient(BaseModel):
    Id: str | None = Field(None, description="The id of the recipient.")
    FirstName: str | None = Field(None, description="The first name of the recipient.")
    LastName: str | None = Field(None, description="The last name of the recipient.")
    OrderIndex: int | None = Field(
        None, description="The order in the envelope of the recipient."
    )
    Email: str | None = Field(None, description="The email address of the recipient.")
    LanguageCode: str | None = Field(
        None, description="The language code of the recipient."
    )
    Status: Optional["Status2"] = Field(
        None, description="The current workstep result status of the recipient."
    )
    StatusReason: str | None = None
    RecipientType: Optional["RecipientType1"] = Field(
        None, description="The type of the recipient."
    )
    SignedDate: datetime | None = Field(
        None, description="The date when the recipient finished its actions."
    )
    OpenedDate: datetime | None = Field(
        None, description="The date when the recipient opened the envelope."
    )
    WorkstepRedirectionUrl: str | None = Field(
        None,
        description="The url for generating a workstep for the recipient. Opens the viewer where the recipient has to perform his actions.",
    )
    AllowAccessFinishedWorkstep: bool | None = Field(
        None,
        description="Defines if the recipient is allowed to access finished workstep.",
    )
    Warnings: list["EnvelopeStatusWarning"] | None = Field(
        None, description="Occured warnings."
    )
    Authentication: list["SendEnvelopeAuthentication"] | None = Field(
        None, description="The possible authentication methods for the recipient."
    )
    IsParallel: bool | None = Field(
        None,
        description="Defines if the recipient is parallel and the corresponding envelope has recipients with the same order index.",
    )
    WorkstepConfiguration: Optional["WorkstepConfiguration"] = Field(
        None, description="WorkstepConfiguration."
    )
    DisclaimerDocuments: list["DisclaimerDocument"] | None = Field(
        None,
        description="A list of disclaimer documents including their type for downloading.",
    )


class EnvelopePrepareModel(BaseModel):
    SspFileIds: list[str] | None = None
    AdHocWorkstepConfiguration: Optional["AdHocWorkstepConfiguration"] = None
    PrepareSendEnvelopeStepsDescriptor: Optional[
        "PrepareSendEnvelopeStepsDescriptor"
    ] = None


class ReplaceRecipientData(BaseModel):
    Recipient: Optional["SendEnvelopeRecipient"] = Field(
        None, description="New information for the recipient which is replaced"
    )
    WorkstepConfiguration: Optional["WorkstepConfiguration"] = Field(
        None,
        description="Optional, new workstep configuration for the recipient which is replaced\r\nOnly supported for <code>RecipientType</code> Signer and Pkcs7Signer.",
    )


class SendEnvelopeStep(BaseModel):
    OrderIndex: int | None = Field(None, description="The order index of the step.")
    Recipients: list["SendEnvelopeRecipient"] | None = Field(
        None,
        description="A list of recipients for this step (usally 1, multiple for bulk).\r\nNot necessary in case of <code>RecipientType</code> Automatic",
    )
    EmailBodyExtra: str | None = Field(
        None, description="The additional email body for the step."
    )
    RecipientType: Optional["RecipientType"] = Field(
        None, description="The recipient type of the step."
    )
    WorkstepConfiguration: Optional["WorkstepConfiguration"] = Field(
        None,
        description="The configuration for the step.\r\nOnly necessary for <code>RecipientType</code> Signer and Pkcs7Signer.",
    )
    DocumentOptions: list["SendEnvelopeDocumentOption"] | None = Field(
        None, description="The document options for the step."
    )
    UseDefaultAgreements: bool | None = Field(
        None, description="Use default Agreements from SignatureDisclosure settings"
    )


class EnvelopeBulkStatus(BaseModel):
    Status: Optional["Status1"] = Field(None, description="The status of the envelope.")
    Email: str | None = Field(
        None,
        description="The email of the bulk recipient. Empty if the envelope is not a bulk.",
    )
    Id: str | None = Field(None, description="The envelope id.")
    LogDocumentId: str | None = Field(
        None, description="The document id of the audit trail information pdf file."
    )
    LogXmlDocumentId: str | None = Field(
        None, description="The document id of the audit trail information xml file."
    )
    FinishedDocuments: list["FinishedDocument"] | None = Field(
        None,
        description="The finished documents of the envelope containing all the actions (e.g. signed signatures, etc.).",
    )
    Steps: list["EnvelopeStatusRecipient"] | None = Field(
        None, description="The steps of the envelope."
    )


class PrepareSendEnvelopeStepsResult(BaseModel):
    AdHocWorkstepConfigResult: Optional["WorkstepConfiguration"] = None
    Steps: list["SendEnvelopeStep"] | None = None
    AddFormFields: Optional["AddFormFields"] = None


class SendEnvelopeDescriptionTemplate(BaseModel):
    Name: str | None = Field(None, description="The name of the envelope.")
    EmailSubject: str | None = Field(
        None, description="The subject of the sent out emails."
    )
    EmailBody: str | None = Field(None, description="The body of the sent out emails.")
    DisplayedEmailSender: str | None = Field(
        None, description="The name of the email sender."
    )
    EnableReminders: bool | None = Field(
        None, description="If true, reminders are used."
    )
    FirstReminderDayAmount: int | None = Field(
        None, description="Amount of days until the first reminder is sent out."
    )
    RecurrentReminderDayAmount: int | None = Field(
        None, description="Amount of days until all recurrent reminders are sent out."
    )
    BeforeExpirationDayAmount: int | None = Field(
        None,
        description="Amount of days until a reminder about the expiration is sent out.",
    )
    DaysUntilExpire: int | None = Field(
        None, description="Amount of days until the envelope expires."
    )
    CallbackUrl: str | None = Field(
        None, description="The callback url of the envelope."
    )
    StatusUpdateCallbackUrl: str | None = Field(
        None, description="The callback url of status changes for the envelope."
    )
    LockFormFieldsAtEnvelopeFinish: bool | None = Field(
        None, description="If true, form fields are locked after envelope is finished."
    )
    WorkstepEventCallback: Optional["WorkstepEventCallback"] = Field(
        None, description="Workstep event callback options."
    )
    Steps: list["SendEnvelopeStep"] | None = Field(
        None, description="The steps for the envelope."
    )
    AddFormFields: Optional["AddFormFields"] = Field(
        None, description="Added form fields."
    )
    MetaDataXml: str | None = None


class SendEnvelopeDescription(BaseModel):
    Name: str | None = Field(None, description="The name of the envelope.")
    EmailSubject: str | None = Field(
        None, description="The subject of the sent out emails."
    )
    EmailBody: str | None = Field(None, description="The body of the sent out emails.")
    DisplayedEmailSender: str | None = Field(
        None, description="The name of the email sender."
    )
    EnableReminders: bool | None = Field(
        None, description="If true, reminders are used."
    )
    FirstReminderDayAmount: int | None = Field(
        None, description="Amount of days until the first reminder is sent out."
    )
    RecurrentReminderDayAmount: int | None = Field(
        None, description="Amount of days until all recurrent reminders are sent out."
    )
    BeforeExpirationDayAmount: int | None = Field(
        None,
        description="Amount of days until a reminder about the expiration is sent out.",
    )
    DaysUntilExpire: int | None = Field(
        None, description="Amount of days until the envelope expires."
    )
    CallbackUrl: str | None = Field(
        None, description="The callback url of the envelope."
    )
    StatusUpdateCallbackUrl: str | None = Field(
        None, description="The callback url of status changes for the envelope."
    )
    LockFormFieldsAtEnvelopeFinish: bool | None = Field(
        None, description="If true, form fields are locked after envelope is finished."
    )
    WorkstepEventCallback: Optional["WorkstepEventCallback"] = Field(
        None, description="Workstep event callback options."
    )
    Steps: list["SendEnvelopeStep"] | None = Field(
        None, description="The steps for the envelope."
    )
    AddFormFields: Optional["AddFormFields"] = Field(
        None, description="Added form fields."
    )
    OverrideFormFieldValues: Optional["OverrideFormFieldOptions"] = Field(
        None, description="Form field descriptions which should be filled."
    )
    MetaDataXml: str | None = None
    AttachSignedDocumentsToEnvelopeLog: bool | None = Field(
        None,
        description="If true, the signed document(s) will be added to the envelope log as attachment.",
    )


class EnvelopeStatus(BaseModel):
    Status: Optional["Status"] = Field(
        None,
        description="The overall status of the envelope or the bulk status in case of a bulk.",
    )
    SendDate: datetime | None = Field(
        None, description="The date when the envelope was sent."
    )
    ExpirationDate: datetime | None = Field(
        None, description="The date when the envelope will expire."
    )
    ValidityFromCreationInDays: int | None = Field(
        None,
        description="The number of days from when the envelope will expire, starting from the send date.",
    )
    Bulks: list["EnvelopeBulkStatus"] | None = Field(
        None,
        description="The list of envelopes which belong to the bulk envelope in case of a bulk.\r\nIn case of a non bulk envelope it consists only of 1 envelope - the actual envelope.",
    )
    Documents: list["SentDocument"] | None = Field(
        None, description="The documents which belong to the envelope."
    )
    Id: str | None = Field(None, description="The id of the envelope.")
    Bulk: str | None = Field(
        None,
        description="The bulk id of the envelope. If the envelope is not a bulk, this value is empty.",
    )
    BasicOptions: Optional["EnvelopeBasicOptions"] = Field(
        None, description="Properties of the envelope (e.g. reminder settings)."
    )
    LockFormFieldsAtEnvelopeFinish: bool | None = Field(
        None,
        description="Defines if form fields are locked after envelope is finished.",
    )


class EnvelopeSendModel(BaseModel):
    SspFileIds: list[str] | None = Field(None, description="The ids of uploaded files.")
    SendEnvelopeDescription: Optional["SendEnvelopeDescription"] = Field(
        None, description="The description of the envelope."
    )


class CopyDocumentFromTemplateResult(BaseModel):
    SspFileIds: list[str] | None = Field(None, description="SspFileId.")
    SendEnvelopeDescription: Optional["SendEnvelopeDescriptionTemplate"] = Field(
        None, description="SendEnvelopeDescription."
    )


class DraftCreateModel(BaseModel):
    SspFileIds: list[str] | None = None
    SendEnvelopeDescription: Optional["SendEnvelopeDescription"] = None
    CreateDraftOptions: Optional["CreateDraftOptions"] = None


class Signature(WorkstepTask):
    PositionPage: int | None = Field(None, description="Page position.")
    Position: Optional["Position"] = Field(
        None, description="HyperLink position configuration."
    )
    Size: Optional["Size"] = Field(None, description="HyperLink size configuration.")
    AdditionalParameters: list["KeyValuePair"] | None = None
    AllowedSignatureTypes: list["SigType"] | None = Field(
        None,
        description="Abstract class, use the derived classes:\r\n- SigTypeAutomaticSignature\r\n- SigTypeBiometricSignature\r\n- SigTypeBiometricSignatureAndLocalCertificate\r\n- SigTypeExternalSigningProcess\r\n- SigTypeLocalCertificate\r\n- SigTypeClick2Sign\r\n- SigTypeDraw2Sign\r\n- SigTypeType2Sign\r\n- SigTypeTransactionCode\r\n- SigTypeTransactionCodeAndBiometricSignature\r\n- SigTypeTransactionCodeAndLocalCertificate\r\n- SigTypeTransactionCodeBiometricSignatureAndLocalCertificate\r\n            \r\nFor usage see sample code.",
    )
    AdditionalClientInformation: str | None = Field(
        None,
        description="Additional client information.",
    )
    Pattern: str | None = Field(
        None,
        description="Pattern found from SigString parsing.",
    )
    UseTimestamp: bool | None = Field(
        None,
        description="Use timestamp. This flag may be overridden if CustomPadesConfiguration enabled/configured!",
    )
    Id: str | None = Field(
        None,
        description="Define the identifier for the task.",
    )
    DisplayName: str | None = Field(
        None,
        description="Define the name to be displayed.",
    )
    DocRefNumber: int | None = Field(
        None,
        description="Document number of the task.",
    )
    AdditionalInformation: str | None = Field(
        None,
        description="Additional information for the client",
    )
    BatchId: str | None = Field(
        None,
        description="Defines multiple tasks which can be executed as a batch (e.g. signatures which accept same data).",
    )


TeamMember.update_forward_refs()
